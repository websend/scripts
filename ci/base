#!/bin/bash

# Colors & markup

red='\033[0;31m'
yellow='\033[0;33m'
green='\033[0;32m'
reset='\033[00m'
bold='\033[01m'
reverse='\033[07m'
cyan='\033[36m'
vtab='\n\n\n'


# Functions

random_string () {
  echo `cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-zA-Z0-9' | tr '[:upper:]' '[:lower:]' | fold -w 4 | head -n 1`
}

error () {
  echo -e "$vtab$red$bold$reverse""Oops, something went wrong.$reset\n$1$vtab"
}

cleanup () {
  print_start "Invoking cleanup..."

  # Make sure we always return success, even if the command fails.
  # Needed to get around this docker bug:
  # Cannot destroy container container_name: Driver overlay failed to remove
  # init filesystem, see https://github.com/docker/docker/issues/14474
  # and https://github.com/docker/docker/issues/17661
  # Happens on docker 1.8.3 linux 4.2.2

  for container_name in ${all_containers[@]}
  do
    docker stop "$container_name" || true
    sleep 0.1
    #docker kill "$container_name" || true
    #sleep 0.1
    docker rm -f -v "$container_name" || true
  done

  # docker rm -f -v ${all_containers[@]} || true
  print_done
}

cleanup_after_error () {
  error
  cleanup
}

print_banner () {
  echo -e "$vtab$1$bold$reverse=============== $2 ===============$reset$vtab"
}

print_small_banner () {
  echo -e "$1$bold$reverse=============== $2 ===============$reset"
}

print_start () {
  echo -e "$yellow$bold===>$reset""$bold$1$reset"
}

print_done () {
  echo -e "$green$bold""done$reset$1"
}

# $1: data container name
# $2: data directory
# $3: data user id
# $4: data group id
start_data_container () {
  print_start "Starting data container $1..."

  set -e
  local data_container_name="$1"
  local data_directory="$2"
  local data_user_id="$3"
  local data_group_id="$4"

  docker run \
  --name "$data_container_name" \
  -e "DATA_DIRECTORY=$data_directory" \
  -e "USER_ID=$data_user_id" \
  -e "GROUP_ID=$data_group_id" \
  -v "$data_directory" \
  "$data_image_name":"$data_image_tag"

  print_done
}


# $1: container name
# $2: data container name
start_redis_container () {
  set -e
  local container_name="$1"
  local data_container_name="$2"

  start_data_container "$data_container_name" "/home/redis/data" "6379" "6379"

  print_start "Starting redis container $1..."
  docker run \
  --name "$container_name" \
  -d \
  -e "DATA_DIRECTORY=/home/redis/data" \
  --volumes-from "$data_container_name" \
  -p :6379 \
  -p :6379/udp \
  "$redis_image_name":"$redis_image_tag" &

  sleep 5
  print_done

  print_start "Reading redis container $container_name host...\c"
  redis_host=$(docker inspect --format '{{ .NetworkSettings.Gateway }}' "$container_name")
  print_done

  print_start "Reading redis container $container_name port...\c"
  redis_port=$(docker inspect --format '{{(index (index .NetworkSettings.Ports "6379/tcp") 0).HostPort }}' "$container_name")
  print_done
}

# $1: container name
# $2: data container name
start_mysql_container () {
  set -e
  local container_name="$1"
  local data_container_name="$2"

  mysql_user_name="root"
  mysql_password=""

  start_data_container "$data_container_name" "/home/mysql/data" "3306" "3306"

  print_start "Starting mysql container $1..."
  docker run \
  --name "$container_name" \
  -d \
  -e "DATA_DIRECTORY=/home/mysql/data" \
  --volumes-from "$data_container_name" \
  -p :3306 \
  "$mysql_image_name":"$mysql_image_tag" &

  sleep 10
  print_done

  print_start "Reading mysql container $container_name host...\c"
  mysql_host=$(docker inspect --format '{{ .NetworkSettings.Gateway }}' "$container_name")
  print_done

  print_start "Reading mysql container $container_name port...\c"
  mysql_port=$(docker inspect --format '{{(index (index .NetworkSettings.Ports "3306/tcp") 0).HostPort }}' "$container_name")
  print_done
}

# $1: container name
start_rabbitmq_container () {
  set -e
  local container_name="$1"
  local data_container_name="$2"

  print_start "Starting rabbitmq container $1..."
  docker run \
  --name "$container_name" \
  -d \
  -p :5672 \
  -p :15672 \
  "$rabbitmq_image_name":"$rabbitmq_image_tag" &

  sleep 5
  print_done

  print_start "Reading rabbitmq container $container_name host...\c"
  rabbitmq_host=$(docker inspect --format '{{ .NetworkSettings.Gateway }}' "$container_name")
  print_done

  print_start "Reading rabbitmq container $container_name port...\c"
  rabbitmq_port=$(docker inspect --format '{{(index (index .NetworkSettings.Ports "5672/tcp") 0).HostPort }}' "$container_name")
  print_done
}

# $1: container name
start_memcached_container () {
  set -e
  local container_name="$1"
  local data_container_name="$2"

  print_start "Starting memcached container $1..."
  docker run \
  --name "$container_name" \
  -d \
  -p :11211 \
  "$memcached_image_name":"$memcached_image_tag" &

  sleep 2
  print_done

  print_start "Reading memcached container $container_name host...\c"
  memcached_host=$(docker inspect --format '{{ .NetworkSettings.Gateway }}' "$container_name")
  print_done

  print_start "Reading memcached container $container_name port...\c"
  memcached_port=$(docker inspect --format '{{(index (index .NetworkSettings.Ports "11211/tcp") 0).HostPort }}' "$container_name")
  print_done
}
